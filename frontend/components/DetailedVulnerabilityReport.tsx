'use client'

import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Copy, Shield, AlertTriangle, Bug, Code, FileText, Zap, Database, Globe, Lock, Eye, Server } from 'lucide-react'
import { VulnerabilityResult, VulnerabilityType } from '@/types/vulnerability'

interface DetailedVulnerabilityReportProps {
  result: VulnerabilityResult
}

const vulnerabilityIcons: Record<VulnerabilityType, React.ReactNode> = {
  RCE: <Zap className="h-4 w-4" />,
  SQLI: <Database className="h-4 w-4" />,
  XSS: <Globe className="h-4 w-4" />,
  LFI: <FileText className="h-4 w-4" />,
  SSRF: <Server className="h-4 w-4" />,
  AFO: <FileText className="h-4 w-4" />,
  IDOR: <Eye className="h-4 w-4" />
}

const vulnerabilityColors: Record<VulnerabilityType, string> = {
  RCE: 'bg-red-500',
  SQLI: 'bg-orange-500',
  XSS: 'bg-yellow-500',
  LFI: 'bg-blue-500',
  SSRF: 'bg-purple-500',
  AFO: 'bg-pink-500',
  IDOR: 'bg-green-500'
}

const vulnerabilityDescriptions: Record<VulnerabilityType, string> = {
  RCE: 'Remote Code Execution - Allows attackers to execute arbitrary code on the server',
  SQLI: 'SQL Injection - Enables unauthorized database access and manipulation',
  XSS: 'Cross-Site Scripting - Allows injection of malicious scripts in web pages',
  LFI: 'Local File Inclusion - Permits reading of arbitrary files from the server',
  SSRF: 'Server-Side Request Forgery - Forces server to make unintended requests',
  AFO: 'Arbitrary File Overwrite - Allows overwriting of critical system files',
  IDOR: 'Insecure Direct Object Reference - Enables unauthorized access to resources'
}

const getSeverityLevel = (confidence: number): { level: string; color: string } => {
  if (confidence >= 9) return { level: 'Critical', color: 'bg-red-100 text-red-800 border-red-200' }
  if (confidence >= 7) return { level: 'High', color: 'bg-orange-100 text-orange-800 border-orange-200' }
  if (confidence >= 5) return { level: 'Medium', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' }
  return { level: 'Low', color: 'bg-blue-100 text-blue-800 border-blue-200' }
}

const formatCodeSnippet = (code: string, maxLines: number = 10): string => {
  const lines = code.split('\n')
  if (lines.length <= maxLines) return code
  return lines.slice(0, maxLines).join('\n') + '\n... (truncated)'
}

const copyToClipboard = (text: string) => {
  navigator.clipboard.writeText(text)
}

export default function DetailedVulnerabilityReport({ result }: DetailedVulnerabilityReportProps) {
  const [selectedTab, setSelectedTab] = useState('overview')

  const totalVulns = result.total_vulnerabilities
  const criticalVulns = result.file_analyses.flatMap(fa => fa.findings).filter(f => f.confidence_score >= 9).length
  const highVulns = result.file_analyses.flatMap(fa => fa.findings).filter(f => f.confidence_score >= 7 && f.confidence_score < 9).length

  return (
    <div className="space-y-6">
      {/* Executive Summary */}
      <Card className="bg-gray-900/50 border-gray-700 shadow-lg backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Shield className="h-5 w-5" />
            Security Analysis Report
          </CardTitle>
          <CardDescription className="text-gray-300">
            Comprehensive vulnerability assessment for {result.project_name}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 bg-gray-800/50 rounded-lg border border-gray-700">
              <div className="text-2xl font-bold text-white">{totalVulns}</div>
              <div className="text-sm text-gray-300">Total Vulnerabilities</div>
            </div>
            <div className="text-center p-4 bg-red-900/30 rounded-lg border border-red-800/50">
              <div className="text-2xl font-bold text-red-400">{criticalVulns}</div>
              <div className="text-sm text-red-300">Critical</div>
            </div>
            <div className="text-center p-4 bg-orange-900/30 rounded-lg border border-orange-800/50">
              <div className="text-2xl font-bold text-orange-400">{highVulns}</div>
              <div className="text-sm text-orange-300">High</div>
            </div>
            <div className="text-center p-4 bg-blue-900/30 rounded-lg border border-blue-800/50">
              <div className="text-2xl font-bold text-blue-400">{result.summary.average_confidence.toFixed(1)}</div>
              <div className="text-sm text-blue-300">Avg Confidence</div>
            </div>
          </div>

          {/* Vulnerability Distribution */}
          <div className="space-y-3">
            <h4 className="font-semibold">Vulnerability Distribution</h4>
            {Object.entries(result.summary.vulnerability_counts).map(([type, count]) => {
              if (count === 0) return null
              const percentage = (count / totalVulns) * 100
              return (
                <div key={type} className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="flex items-center gap-2">
                      {vulnerabilityIcons[type as VulnerabilityType]}
                      {type}
                    </span>
                    <span>{count} ({percentage.toFixed(1)}%)</span>
                  </div>
                  <Progress value={percentage} className="h-2" />
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Detailed Analysis Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="overview">Security Overview</TabsTrigger>
          <TabsTrigger value="findings">Vulnerability Details</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <Card className="bg-gray-900/50 border-gray-700 shadow-lg backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-white">Project Security Assessment</CardTitle>
              <CardDescription className="text-gray-300">Analysis results for {result.project_name}</CardDescription>
            </CardHeader>
            <CardContent>
              <Alert className={`mb-6 ${criticalVulns > 0 ? 'border-red-800/50 bg-red-900/20' : highVulns > 0 ? 'border-orange-800/50 bg-orange-900/20' : 'border-yellow-800/50 bg-yellow-900/20'} backdrop-blur-sm`}>
                <AlertTriangle className={`h-4 w-4 ${criticalVulns > 0 ? 'text-red-400' : highVulns > 0 ? 'text-orange-400' : 'text-yellow-400'}`} />
                <AlertTitle className={`text-lg font-semibold ${criticalVulns > 0 ? 'text-red-200' : highVulns > 0 ? 'text-orange-200' : 'text-yellow-200'}`}>
                  Risk Level: {criticalVulns > 0 ? 'CRITICAL' : highVulns > 0 ? 'HIGH' : 'MEDIUM'}
                </AlertTitle>
                <AlertDescription className={`mt-2 ${criticalVulns > 0 ? 'text-red-300' : highVulns > 0 ? 'text-orange-300' : 'text-yellow-300'}`}>
                  {criticalVulns > 0 
                    ? `Found ${criticalVulns} critical vulnerabilities that require immediate attention. These could lead to complete system compromise.`
                    : highVulns > 0 
                    ? `Identified ${highVulns} high-priority security issues that should be addressed promptly.`
                    : 'Detected medium-risk vulnerabilities that should be reviewed and addressed in the next development cycle.'
                  }
                </AlertDescription>
              </Alert>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold mb-3 flex items-center gap-2 text-white">
                    <Bug className="h-4 w-4 text-red-400" />
                    Critical Vulnerabilities
                  </h4>
                  <div className="space-y-3">
                    {result.file_analyses.flatMap(fa => 
                      fa.findings.map(finding => ({
                        ...finding,
                        file: fa.file_path.split('/').pop() || fa.file_path
                      }))
                    )
                    .sort((a, b) => b.confidence_score - a.confidence_score)
                    .slice(0, 5)
                    .map((finding, idx) => (
                      <div key={idx} className="border border-gray-700 rounded-lg p-4 bg-gray-800/50 backdrop-blur-sm">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <Badge className={`${getSeverityLevel(finding.confidence_score).color} border font-medium`}>
                              {getSeverityLevel(finding.confidence_score).level}
                            </Badge>
                            <span className="text-sm font-medium text-white">{finding.file}</span>
                          </div>
                          <span className="text-xs text-gray-300 font-medium">Confidence: {finding.confidence_score}/10</span>
                        </div>
                        <div className="flex gap-1 flex-wrap">
                          {finding.vulnerability_types.map((type: VulnerabilityType) => (
                            <Badge key={type} variant="outline" className="text-xs bg-gray-700/50 text-gray-200 border-gray-600 font-medium">
                              {type}
                            </Badge>
                          ))}
                        </div>
                        <div className="mt-2 text-xs text-gray-300 line-clamp-2">
                          {finding.analysis.substring(0, 120)}...
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold mb-3 flex items-center gap-2 text-white">
                    <FileText className="h-4 w-4 text-blue-400" />
                    File Analysis Summary
                  </h4>
                  <div className="space-y-2">
                    {result.file_analyses.map((fa, idx) => {
                      const fileName = fa.file_path.split('/').pop() || fa.file_path
                      const criticalCount = fa.findings.filter(f => f.confidence_score >= 9).length
                      const highCount = fa.findings.filter(f => f.confidence_score >= 7 && f.confidence_score < 9).length
                      
                      return (
                        <div key={idx} className="border border-gray-700 rounded-lg p-4 bg-gray-800/50 backdrop-blur-sm">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-mono text-sm font-medium text-white">{fileName}</span>
                            <span className="text-xs text-gray-300 font-medium">{fa.findings.length} issues</span>
                          </div>
                          <div className="flex gap-2 text-xs font-medium">
                            {criticalCount > 0 && (
                              <span className="bg-red-900/30 text-red-300 px-2 py-1 rounded border border-red-800/50">{criticalCount} Critical</span>
                            )}
                            {highCount > 0 && (
                              <span className="bg-orange-900/30 text-orange-300 px-2 py-1 rounded border border-orange-800/50">{highCount} High</span>
                            )}
                            {fa.findings.length - criticalCount - highCount > 0 && (
                              <span className="bg-yellow-900/30 text-yellow-300 px-2 py-1 rounded border border-yellow-800/50">{fa.findings.length - criticalCount - highCount} Medium</span>
                            )}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="findings" className="space-y-6">
          {result.file_analyses.map((fileAnalysis, fileIdx) => {
            const fileName = fileAnalysis.file_path.split('/').pop() || fileAnalysis.file_path
            return (
              <Card key={fileIdx} className="bg-gray-900/50 border-gray-700 shadow-lg backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-white">
                    <Code className="h-4 w-4" />
                    <span className="font-mono">{fileName}</span>
                  </CardTitle>
                  <CardDescription className="text-gray-300">
                    {fileAnalysis.findings.length} security {fileAnalysis.findings.length === 1 ? 'issue' : 'issues'} detected
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {fileAnalysis.findings.map((finding, findingIdx) => {
                      const severity = getSeverityLevel(finding.confidence_score)
                      return (
                        <div key={findingIdx} className="border border-gray-700 rounded-lg p-4 space-y-4 bg-gray-800/50 backdrop-blur-sm">
                          {/* Header */}
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3 flex-wrap">
                              <Badge className={`${severity.color} border font-medium`}>{severity.level}</Badge>
                              <div className="flex gap-1 flex-wrap">
                                {finding.vulnerability_types.map((type: VulnerabilityType) => (
                                  <Badge key={type} variant="outline" className="flex items-center gap-1 bg-gray-700/50 text-gray-200 border-gray-600 font-medium">
                                    {vulnerabilityIcons[type]}
                                    {type}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                            <span className="text-sm text-gray-300 font-medium">
                              Confidence: {finding.confidence_score}/10
                            </span>
                          </div>

                          {/* Analysis */}
                          <div>
                            <h5 className="font-semibold mb-2 text-white">What's Wrong</h5>
                            <div className="bg-blue-900/20 border border-blue-800/50 p-3 rounded-lg backdrop-blur-sm">
                              <p className="text-sm text-gray-200 leading-relaxed">{finding.analysis}</p>
                            </div>
                          </div>

                          {/* Proof of Concept */}
                          {finding.poc && (
                            <div>
                              <div className="flex items-center justify-between mb-2">
                                <h5 className="font-semibold text-white">How to Exploit</h5>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => copyToClipboard(finding.poc)}
                                  className="h-7 px-2 bg-gray-700/50 border-gray-600 text-gray-200 hover:bg-gray-600/50"
                                >
                                  <Copy className="h-3 w-3 mr-1" />
                                  Copy
                                </Button>
                              </div>
                              <div className="bg-red-900/20 border border-red-800/50 p-3 rounded-lg backdrop-blur-sm">
                                <code className="text-sm font-mono text-red-200 whitespace-pre-wrap block">
                                  {formatCodeSnippet(finding.poc, 15)}
                                </code>
                              </div>
                            </div>
                          )}

                          {/* Quick Fix */}
                          <div>
                            <h5 className="font-semibold mb-2 text-white">How to Fix</h5>
                            <div className="bg-green-900/20 border border-green-800/50 p-3 rounded-lg backdrop-blur-sm">
                              <p className="text-sm text-gray-200 leading-relaxed">
                                {getQuickFix(finding.vulnerability_types[0])}
                              </p>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </TabsContent>

      </Tabs>
    </div>
  )
}

function getQuickFix(type: VulnerabilityType): string {
  const fixes = {
    RCE: 'Never use eval() or exec() with user input. Use safe alternatives like ast.literal_eval() for data parsing, or validate inputs strictly before processing.',
    SQLI: 'Use parameterized queries or prepared statements. Replace string concatenation like f"SELECT * FROM users WHERE id = {user_id}" with cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))',
    XSS: 'Escape user input before rendering. Use template engines with auto-escaping enabled, or manually escape with html.escape() in Python.',
    LFI: 'Validate file paths and use os.path.join() with a safe base directory. Never allow "../" in user input for file paths.',
    SSRF: 'Validate URLs against a whitelist of allowed domains. Use urllib.parse to check the hostname before making requests.',
    AFO: 'Validate file paths and restrict write operations to specific directories. Use os.path.abspath() and check if the path is within allowed directories.',
    IDOR: 'Add authorization checks. Verify that the current user has permission to access the requested resource before returning data.'
  }
  return fixes[type] || 'Implement proper input validation and security controls.'
}
