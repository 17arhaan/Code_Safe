'use client'

import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Progress } from '@/components/ui/progress'
import { Copy, Shield, AlertTriangle, Bug, Code, FileText, Zap, Database, Globe, Lock, Eye, Server } from 'lucide-react'
import { VulnerabilityResult, VulnerabilityType } from '@/types/vulnerability'

interface DetailedVulnerabilityReportProps {
  result: VulnerabilityResult
}

const vulnerabilityIcons: Record<VulnerabilityType, React.ReactNode> = {
  RCE: <Zap className="h-4 w-4" />,
  SQLI: <Database className="h-4 w-4" />,
  XSS: <Globe className="h-4 w-4" />,
  LFI: <FileText className="h-4 w-4" />,
  SSRF: <Server className="h-4 w-4" />,
  AFO: <FileText className="h-4 w-4" />,
  IDOR: <Eye className="h-4 w-4" />
}

const vulnerabilityColors: Record<VulnerabilityType, string> = {
  RCE: 'bg-red-500',
  SQLI: 'bg-orange-500',
  XSS: 'bg-yellow-500',
  LFI: 'bg-blue-500',
  SSRF: 'bg-purple-500',
  AFO: 'bg-pink-500',
  IDOR: 'bg-green-500'
}

const vulnerabilityDescriptions: Record<VulnerabilityType, string> = {
  RCE: 'Remote Code Execution - Allows attackers to execute arbitrary code on the server',
  SQLI: 'SQL Injection - Enables unauthorized database access and manipulation',
  XSS: 'Cross-Site Scripting - Allows injection of malicious scripts in web pages',
  LFI: 'Local File Inclusion - Permits reading of arbitrary files from the server',
  SSRF: 'Server-Side Request Forgery - Forces server to make unintended requests',
  AFO: 'Arbitrary File Overwrite - Allows overwriting of critical system files',
  IDOR: 'Insecure Direct Object Reference - Enables unauthorized access to resources'
}

const getSeverityLevel = (confidence: number): { level: string; color: string } => {
  if (confidence >= 9) return { level: 'Critical', color: 'text-red-600' }
  if (confidence >= 7) return { level: 'High', color: 'text-orange-600' }
  if (confidence >= 5) return { level: 'Medium', color: 'text-yellow-600' }
  return { level: 'Low', color: 'text-blue-600' }
}

const formatCodeSnippet = (code: string, maxLines: number = 10): string => {
  const lines = code.split('\n')
  if (lines.length <= maxLines) return code
  return lines.slice(0, maxLines).join('\n') + '\n... (truncated)'
}

const copyToClipboard = (text: string) => {
  navigator.clipboard.writeText(text)
}

export default function DetailedVulnerabilityReport({ result }: DetailedVulnerabilityReportProps) {
  const [selectedTab, setSelectedTab] = useState('overview')

  const totalVulns = result.total_vulnerabilities
  const criticalVulns = result.file_analyses.flatMap(fa => fa.findings).filter(f => f.confidence_score >= 9).length
  const highVulns = result.file_analyses.flatMap(fa => fa.findings).filter(f => f.confidence_score >= 7 && f.confidence_score < 9).length

  return (
    <div className="space-y-6">
      {/* Executive Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Security Analysis Report
          </CardTitle>
          <CardDescription>
            Comprehensive vulnerability assessment for {result.project_name}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-gray-900">{totalVulns}</div>
              <div className="text-sm text-gray-600">Total Vulnerabilities</div>
            </div>
            <div className="text-center p-4 bg-red-50 rounded-lg">
              <div className="text-2xl font-bold text-red-600">{criticalVulns}</div>
              <div className="text-sm text-red-600">Critical</div>
            </div>
            <div className="text-center p-4 bg-orange-50 rounded-lg">
              <div className="text-2xl font-bold text-orange-600">{highVulns}</div>
              <div className="text-sm text-orange-600">High</div>
            </div>
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{result.summary.average_confidence.toFixed(1)}</div>
              <div className="text-sm text-blue-600">Avg Confidence</div>
            </div>
          </div>

          {/* Vulnerability Distribution */}
          <div className="space-y-3">
            <h4 className="font-semibold">Vulnerability Distribution</h4>
            {Object.entries(result.summary.vulnerability_counts).map(([type, count]) => {
              if (count === 0) return null
              const percentage = (count / totalVulns) * 100
              return (
                <div key={type} className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="flex items-center gap-2">
                      {vulnerabilityIcons[type as VulnerabilityType]}
                      {type}
                    </span>
                    <span>{count} ({percentage.toFixed(1)}%)</span>
                  </div>
                  <Progress value={percentage} className="h-2" />
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Detailed Analysis Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="findings">Detailed Findings</TabsTrigger>
          <TabsTrigger value="remediation">Remediation Guide</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Risk Assessment</CardTitle>
            </CardHeader>
            <CardContent>
              <Alert className="mb-4">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Security Risk Level: {criticalVulns > 0 ? 'CRITICAL' : highVulns > 0 ? 'HIGH' : 'MEDIUM'}</AlertTitle>
                <AlertDescription>
                  {criticalVulns > 0 
                    ? 'Immediate action required. Critical vulnerabilities detected that could lead to complete system compromise.'
                    : highVulns > 0 
                    ? 'High priority vulnerabilities found. Address these issues as soon as possible.'
                    : 'Medium risk vulnerabilities detected. Plan remediation in next development cycle.'
                  }
                </AlertDescription>
              </Alert>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-semibold mb-2">Most Critical Issues</h4>
                  <div className="space-y-2">
                    {result.file_analyses.flatMap(fa => 
                      fa.findings.map(finding => ({
                        ...finding,
                        file: fa.file_path
                      }))
                    )
                    .sort((a, b) => b.confidence_score - a.confidence_score)
                    .slice(0, 3)
                    .map((finding, idx) => (
                      <div key={idx} className="flex items-center gap-2 p-2 bg-gray-50 rounded">
                        <Badge variant="destructive">{getSeverityLevel(finding.confidence_score).level}</Badge>
                        <span className="text-sm">{finding.vulnerability_types.join(', ')}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold mb-2">Affected Files</h4>
                  <div className="space-y-1">
                    {result.file_analyses.map((fa, idx) => (
                      <div key={idx} className="text-sm">
                        <span className="font-mono text-xs bg-gray-100 px-2 py-1 rounded">
                          {fa.file_path.split('/').pop()}
                        </span>
                        <span className="ml-2 text-gray-600">({fa.findings.length} issues)</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="findings" className="space-y-4">
          {result.file_analyses.map((fileAnalysis, fileIdx) => (
            <Card key={fileIdx}>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Code className="h-4 w-4" />
                  {fileAnalysis.file_path.split('/').pop()}
                </CardTitle>
                <CardDescription>
                  {fileAnalysis.findings.length} vulnerabilities found
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Accordion type="single" collapsible>
                  {fileAnalysis.findings.map((finding, findingIdx) => {
                    const severity = getSeverityLevel(finding.confidence_score)
                    return (
                      <AccordionItem key={findingIdx} value={`finding-${fileIdx}-${findingIdx}`}>
                        <AccordionTrigger className="text-left">
                          <div className="flex items-center gap-2 flex-wrap">
                            <Badge className={severity.color}>{severity.level}</Badge>
                            <div className="flex gap-1">
                              {finding.vulnerability_types.map((type: VulnerabilityType) => (
                                <Badge key={type} variant="outline" className="flex items-center gap-1">
                                  {vulnerabilityIcons[type]}
                                  {type}
                                </Badge>
                              ))}
                            </div>
                            <span className="text-sm text-gray-600">
                              Confidence: {finding.confidence_score}/10
                            </span>
                          </div>
                        </AccordionTrigger>
                        <AccordionContent className="space-y-4">
                          {/* Vulnerability Description */}
                          <div>
                            <h5 className="font-semibold mb-2">Description</h5>
                            <div className="space-y-2">
                              {finding.vulnerability_types.map((type: VulnerabilityType) => (
                                <Alert key={type}>
                                  <Bug className="h-4 w-4" />
                                  <AlertTitle>{type}</AlertTitle>
                                  <AlertDescription>{vulnerabilityDescriptions[type]}</AlertDescription>
                                </Alert>
                              ))}
                            </div>
                          </div>

                          {/* Technical Analysis */}
                          <div>
                            <h5 className="font-semibold mb-2">Technical Analysis</h5>
                            <div className="bg-gray-50 p-4 rounded-lg">
                              <p className="text-sm whitespace-pre-wrap">{finding.analysis}</p>
                            </div>
                          </div>

                          {/* Proof of Concept */}
                          {finding.poc && (
                            <div>
                              <h5 className="font-semibold mb-2 flex items-center gap-2">
                                Proof of Concept
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => copyToClipboard(finding.poc)}
                                >
                                  <Copy className="h-3 w-3" />
                                </Button>
                              </h5>
                              <div className="bg-red-50 border border-red-200 p-4 rounded-lg">
                                <code className="text-sm font-mono whitespace-pre-wrap">
                                  {formatCodeSnippet(finding.poc)}
                                </code>
                              </div>
                            </div>
                          )}

                          {/* Security Engineer Notes */}
                          {finding.scratchpad && (
                            <div>
                              <h5 className="font-semibold mb-2">Security Engineer Analysis</h5>
                              <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
                                <p className="text-sm whitespace-pre-wrap">{finding.scratchpad}</p>
                              </div>
                            </div>
                          )}
                        </AccordionContent>
                      </AccordionItem>
                    )
                  })}
                </Accordion>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="remediation" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Remediation Roadmap</CardTitle>
              <CardDescription>
                Prioritized action plan for addressing security vulnerabilities
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Immediate Actions */}
              <div>
                <h4 className="font-semibold text-red-600 mb-3">🚨 Immediate Actions (Critical)</h4>
                <div className="space-y-3">
                  {Object.entries(result.summary.vulnerability_counts)
                    .filter(([_, count]) => count > 0)
                    .map(([type, count]) => (
                      <Alert key={type} className="border-red-200">
                        <AlertTriangle className="h-4 w-4" />
                        <AlertTitle className="flex items-center gap-2">
                          {vulnerabilityIcons[type as VulnerabilityType]}
                          {type} ({count} instances)
                        </AlertTitle>
                        <AlertDescription>
                          {getRemediationAdvice(type as VulnerabilityType)}
                        </AlertDescription>
                      </Alert>
                    ))}
                </div>
              </div>

              {/* Software Engineering Best Practices */}
              <div>
                <h4 className="font-semibold text-blue-600 mb-3">🛠️ Software Engineering Improvements</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Code Quality</CardTitle>
                    </CardHeader>
                    <CardContent className="text-sm space-y-2">
                      <p>• Implement static code analysis (SonarQube, CodeQL)</p>
                      <p>• Add pre-commit hooks for security scanning</p>
                      <p>• Enforce code review requirements</p>
                      <p>• Implement unit tests with security test cases</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Security Integration</CardTitle>
                    </CardHeader>
                    <CardContent className="text-sm space-y-2">
                      <p>• Integrate SAST/DAST in CI/CD pipeline</p>
                      <p>• Implement dependency vulnerability scanning</p>
                      <p>• Add security testing in QA process</p>
                      <p>• Regular penetration testing schedule</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Development Process</CardTitle>
                    </CardHeader>
                    <CardContent className="text-sm space-y-2">
                      <p>• Adopt secure coding standards (OWASP)</p>
                      <p>• Implement threat modeling in design phase</p>
                      <p>• Security training for development team</p>
                      <p>• Regular security architecture reviews</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Monitoring & Response</CardTitle>
                    </CardHeader>
                    <CardContent className="text-sm space-y-2">
                      <p>• Implement security monitoring (SIEM)</p>
                      <p>• Set up vulnerability alerting</p>
                      <p>• Create incident response procedures</p>
                      <p>• Regular security metrics reporting</p>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

function getRemediationAdvice(type: VulnerabilityType): string {
  const advice = {
    RCE: 'Immediately sanitize all user inputs, avoid eval() and exec() functions, use parameterized queries, and implement input validation.',
    SQLI: 'Replace string concatenation with parameterized queries/prepared statements, implement input validation, and use ORM frameworks.',
    XSS: 'Implement proper output encoding, use Content Security Policy (CSP), sanitize user inputs, and validate all data.',
    LFI: 'Validate and sanitize file paths, implement whitelist-based file access, use absolute paths, and restrict file system access.',
    SSRF: 'Validate and whitelist URLs, implement network segmentation, use DNS filtering, and restrict outbound connections.',
    AFO: 'Validate file paths, implement access controls, use secure file upload mechanisms, and restrict write permissions.',
    IDOR: 'Implement proper authorization checks, use indirect object references, validate user permissions, and audit access controls.'
  }
  return advice[type] || 'Implement proper security controls and validation.'
}
