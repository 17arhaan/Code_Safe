'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  AlertTriangle, 
  FileText, 
  ChevronDown, 
  ChevronRight, 
  Copy, 
  CheckCircle,
  Info,
  ArrowLeft,
  Download,
  TrendingUp,
  Target,
  Shield
} from 'lucide-react'
import { VulnerabilityResult, VulnerabilityType } from '@/types/vulnerability'

interface VulnerabilityReportProps {
  results: VulnerabilityResult
  onReset: () => void
}

const vulnerabilityConfig: Record<VulnerabilityType, { 
  color: string; 
  bgColor: string; 
  borderColor: string;
  icon: string;
}> = {
  RCE: { color: 'text-red-300', bgColor: 'bg-red-500/20', borderColor: 'border-red-500/30', icon: '🔥' },
  LFI: { color: 'text-orange-300', bgColor: 'bg-orange-500/20', borderColor: 'border-orange-500/30', icon: '📁' },
  XSS: { color: 'text-yellow-300', bgColor: 'bg-yellow-500/20', borderColor: 'border-yellow-500/30', icon: '⚡' },
  SQLI: { color: 'text-purple-300', bgColor: 'bg-purple-500/20', borderColor: 'border-purple-500/30', icon: '🗄️' },
  SSRF: { color: 'text-blue-300', bgColor: 'bg-blue-500/20', borderColor: 'border-blue-500/30', icon: '🌐' },
  AFO: { color: 'text-pink-300', bgColor: 'bg-pink-500/20', borderColor: 'border-pink-500/30', icon: '📝' },
  IDOR: { color: 'text-green-300', bgColor: 'bg-green-500/20', borderColor: 'border-green-500/30', icon: '🔐' }
}

const getConfidenceColor = (score: number) => {
  if (score >= 8) return 'text-red-300'
  if (score >= 7) return 'text-yellow-300'
  return 'text-green-300'
}

const getConfidenceLabel = (score: number) => {
  if (score >= 8) return 'High Risk'
  if (score >= 7) return 'Medium Risk'
  return 'Low Risk'
}

const getConfidenceBg = (score: number) => {
  if (score >= 8) return 'bg-red-500/20'
  if (score >= 7) return 'bg-yellow-500/20'
  return 'bg-green-500/20'
}

export default function VulnerabilityReport({ results, onReset }: VulnerabilityReportProps) {
  const [expandedFiles, setExpandedFiles] = useState<Set<string>>(new Set())
  const [expandedFindings, setExpandedFindings] = useState<Set<string>>(new Set())
  const [copiedPoc, setCopiedPoc] = useState<string | null>(null)

  const toggleFileExpansion = (filePath: string) => {
    const newExpanded = new Set(expandedFiles)
    if (newExpanded.has(filePath)) {
      newExpanded.delete(filePath)
    } else {
      newExpanded.add(filePath)
    }
    setExpandedFiles(newExpanded)
  }

  const toggleFindingExpansion = (findingId: string) => {
    const newExpanded = new Set(expandedFindings)
    if (newExpanded.has(findingId)) {
      newExpanded.delete(findingId)
    } else {
      newExpanded.add(findingId)
    }
    setExpandedFindings(newExpanded)
  }

  const copyToClipboard = async (text: string, findingId: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedPoc(findingId)
      setTimeout(() => setCopiedPoc(null), 2000)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const downloadReport = () => {
    const reportData = JSON.stringify(results, null, 2)
    const blob = new Blob([reportData], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `code-safe-report-${results.project_name}-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
      className="max-w-7xl mx-auto space-y-8"
    >
      {/* Header */}
      <div className="flex items-center justify-between">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={onReset}
          className="flex items-center gap-3 text-slate-400 hover:text-white transition-colors group"
        >
          <div className="w-12 h-12 glass-light group-hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors">
            <ArrowLeft className="w-6 h-6" />
          </div>
          <span className="font-medium text-lg">New Analysis</span>
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={downloadReport}
          className="flex items-center gap-3 glass hover:bg-slate-700/50 text-slate-300 px-6 py-3 rounded-2xl transition-colors font-medium"
        >
          <Download className="w-5 h-5" />
          Download Report
        </motion.button>
      </div>

      {/* Summary Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
        className="grid md:grid-cols-4 gap-6"
      >
        {[
          { icon: FileText, label: 'Files Analyzed', value: results.total_files_analyzed, color: 'from-blue-500 to-cyan-500' },
          { icon: AlertTriangle, label: 'Total Issues', value: results.total_vulnerabilities, color: 'from-red-500 to-pink-500' },
          { icon: Target, label: 'High Risk', value: results.high_confidence_vulnerabilities, color: 'from-red-500 to-orange-500' },
          { icon: TrendingUp, label: 'Avg Score', value: results.summary.average_confidence.toFixed(1), color: 'from-green-500 to-emerald-500' }
        ].map((card, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 + index * 0.1 }}
            whileHover={{ y: -4 }}
            className="glass rounded-3xl p-8 hover:shadow-xl transition-all duration-300"
          >
            <div className="flex items-center gap-4 mb-4">
              <div className={`w-14 h-14 bg-gradient-to-br ${card.color} rounded-2xl flex items-center justify-center shadow-lg`}>
                <card.icon className="w-7 h-7 text-white" />
              </div>
              <span className="text-slate-400 font-medium">{card.label}</span>
            </div>
            <div className="text-4xl font-bold text-white">{card.value}</div>
          </motion.div>
        ))}
      </motion.div>

      {/* Vulnerability Types Summary */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.3 }}
        className="glass rounded-3xl p-8"
      >
        <h3 className="text-2xl font-semibold text-white mb-8">Vulnerability Types Found</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
          {Object.entries(results.summary.vulnerability_counts).map(([type, count], index) => {
            const config = vulnerabilityConfig[type as VulnerabilityType]
            return (
              <motion.div
                key={type}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.4, delay: 0.1 + index * 0.05 }}
                whileHover={{ scale: 1.05 }}
                className={`${config.bgColor} ${config.borderColor} border rounded-2xl p-6 text-center transition-all hover:shadow-lg`}
              >
                <div className="text-2xl mb-2">{config.icon}</div>
                <div className={`text-2xl font-bold ${config.color} mb-1`}>{count}</div>
                <div className="text-xs font-medium text-slate-400">{type}</div>
              </motion.div>
            )
          })}
        </div>
      </motion.div>

      {/* No Vulnerabilities Found */}
      {results.total_vulnerabilities === 0 && (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6 }}
          className="bg-green-500/10 border border-green-500/20 rounded-3xl p-12 text-center backdrop-blur-sm"
        >
          <motion.div
            animate={{ rotate: [0, 10, -10, 0] }}
            transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
            className="w-20 h-20 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-6"
          >
            <CheckCircle className="w-10 h-10 text-green-400" />
          </motion.div>
          <h3 className="text-3xl font-semibold text-green-400 mb-4">No Vulnerabilities Found</h3>
          <p className="text-green-300 text-lg max-w-2xl mx-auto">
            Great news! The AI analysis didn&apos;t find any obvious security vulnerabilities in your code.
            Your project appears to follow good security practices.
          </p>
        </motion.div>
      )}

      {/* File Analysis Results */}
      {results.file_analyses.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="space-y-6"
        >
          <h3 className="text-3xl font-semibold text-white">Detailed Analysis</h3>
          
          <div className="space-y-4">
            {results.file_analyses.map((fileAnalysis, fileIndex) => (
              <motion.div
                key={fileIndex}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.4, delay: fileIndex * 0.1 }}
                className="glass rounded-3xl overflow-hidden"
              >
                {/* File Header */}
                <motion.button
                  whileHover={{ backgroundColor: 'rgba(71, 85, 105, 0.3)' }}
                  onClick={() => toggleFileExpansion(fileAnalysis.file_path)}
                  className="w-full px-8 py-6 flex items-center justify-between transition-colors"
                >
                  <div className="flex items-center gap-4">
                    <div className="w-14 h-14 bg-blue-500/20 rounded-2xl flex items-center justify-center">
                      <FileText className="w-7 h-7 text-blue-400" />
                    </div>
                    <div className="text-left">
                      <div className="text-white font-semibold text-xl">{fileAnalysis.file_path}</div>
                      <div className="text-slate-400 text-lg">
                        {fileAnalysis.findings.length} vulnerabilities found
                      </div>
                    </div>
                    <div className="bg-red-500/20 text-red-300 px-4 py-2 rounded-xl text-sm font-medium border border-red-500/30">
                      {fileAnalysis.findings.length} issues
                    </div>
                  </div>
                  <motion.div
                    animate={{ rotate: expandedFiles.has(fileAnalysis.file_path) ? 180 : 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <ChevronDown className="w-6 h-6 text-slate-400" />
                  </motion.div>
                </motion.button>

                {/* File Content */}
                <AnimatePresence>
                  {expandedFiles.has(fileAnalysis.file_path) && (
                    <motion.div
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: 'auto', opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.3 }}
                      className="border-t border-slate-700/50 overflow-hidden"
                    >
                      {fileAnalysis.findings.map((finding, findingIndex) => {
                        const findingId = `${fileIndex}-${findingIndex}`
                        const isExpanded = expandedFindings.has(findingId)
                        
                        return (
                          <div key={findingIndex} className="border-b border-slate-700/50 last:border-b-0">
                            {/* Finding Header */}
                            <motion.button
                              whileHover={{ backgroundColor: 'rgba(71, 85, 105, 0.2)' }}
                              onClick={() => toggleFindingExpansion(findingId)}
                              className="w-full px-8 py-6 flex items-center justify-between transition-colors"
                            >
                              <div className="flex items-center gap-4">
                                <div className="flex gap-2">
                                  {finding.vulnerability_types.map((type, typeIndex) => {
                                    const config = vulnerabilityConfig[type]
                                    return (
                                      <motion.span
                                        key={typeIndex}
                                        initial={{ opacity: 0, scale: 0.8 }}
                                        animate={{ opacity: 1, scale: 1 }}
                                        transition={{ duration: 0.3, delay: typeIndex * 0.1 }}
                                        className={`${config.bgColor} ${config.color} ${config.borderColor} border px-3 py-1 rounded-xl text-sm font-medium flex items-center gap-1`}
                                      >
                                        <span>{config.icon}</span>
                                        {type}
                                      </motion.span>
                                    )
                                  })}
                                </div>
                                <div className={`${getConfidenceBg(finding.confidence_score)} px-4 py-2 rounded-xl border border-slate-600/50`}>
                                  <span className={`text-sm font-medium ${getConfidenceColor(finding.confidence_score)}`}>
                                    {getConfidenceLabel(finding.confidence_score)} ({finding.confidence_score}/10)
                                  </span>
                                </div>
                              </div>
                              <motion.div
                                animate={{ rotate: isExpanded ? 180 : 0 }}
                                transition={{ duration: 0.2 }}
                              >
                                <ChevronDown className="w-5 h-5 text-slate-400" />
                              </motion.div>
                            </motion.button>

                            {/* Finding Details */}
                            <AnimatePresence>
                              {isExpanded && (
                                <motion.div
                                  initial={{ height: 0, opacity: 0 }}
                                  animate={{ height: 'auto', opacity: 1 }}
                                  exit={{ height: 0, opacity: 0 }}
                                  transition={{ duration: 0.3 }}
                                  className="px-8 pb-8 space-y-6 overflow-hidden"
                                >
                                  {/* Analysis */}
                                  <motion.div
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ duration: 0.4 }}
                                  >
                                    <h5 className="text-lg font-semibold text-slate-300 mb-3 flex items-center gap-2">
                                      <Info className="w-5 h-5" />
                                      Analysis
                                    </h5>
                                    <div className="glass-light rounded-2xl p-6">
                                      <p className="text-slate-300 leading-relaxed">{finding.analysis}</p>
                                    </div>
                                  </motion.div>

                                  {/* Proof of Concept */}
                                  {finding.poc && (
                                    <motion.div
                                      initial={{ opacity: 0, y: 10 }}
                                      animate={{ opacity: 1, y: 0 }}
                                      transition={{ duration: 0.4, delay: 0.1 }}
                                    >
                                      <div className="flex items-center justify-between mb-3">
                                        <h5 className="text-lg font-semibold text-slate-300 flex items-center gap-2">
                                          <AlertTriangle className="w-5 h-5" />
                                          Proof of Concept
                                        </h5>
                                        <motion.button
                                          whileHover={{ scale: 1.05 }}
                                          whileTap={{ scale: 0.95 }}
                                          onClick={() => copyToClipboard(finding.poc, findingId)}
                                          className="flex items-center gap-2 text-sm text-slate-400 hover:text-white transition-colors glass-light px-3 py-2 rounded-xl"
                                        >
                                          {copiedPoc === findingId ? (
                                            <>
                                              <CheckCircle className="w-4 h-4" />
                                              Copied!
                                            </>
                                          ) : (
                                            <>
                                              <Copy className="w-4 h-4" />
                                              Copy
                                            </>
                                          )}
                                        </motion.button>
                                      </div>
                                      <div className="bg-slate-900/80 rounded-2xl p-6 border border-slate-700/50">
                                        <pre className="text-slate-100 text-sm whitespace-pre-wrap font-mono">
                                          {finding.poc}
                                        </pre>
                                      </div>
                                    </motion.div>
                                  )}

                                  {/* Scratchpad */}
                                  {finding.scratchpad && (
                                    <motion.details
                                      initial={{ opacity: 0 }}
                                      animate={{ opacity: 1 }}
                                      transition={{ duration: 0.4, delay: 0.2 }}
                                      className="group"
                                    >
                                      <summary className="text-lg font-semibold text-slate-300 cursor-pointer hover:text-white transition-colors">
                                        Technical Analysis Details
                                      </summary>
                                      <motion.div
                                        initial={{ opacity: 0, height: 0 }}
                                        animate={{ opacity: 1, height: 'auto' }}
                                        transition={{ duration: 0.3 }}
                                        className="mt-4 glass-light rounded-2xl p-6"
                                      >
                                        <p className="text-slate-400 text-sm leading-relaxed">{finding.scratchpad}</p>
                                      </motion.div>
                                    </motion.details>
                                  )}
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </div>
                        )
                      })}
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            ))}
          </div>
        </motion.div>
      )}
    </motion.div>
  )
}
