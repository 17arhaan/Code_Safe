name: Security Analysis CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Python Security Analysis
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Bandit Security Linter
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        bandit -r backend/ -f txt

    - name: Check Python Dependencies for Vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep Security Analysis
      run: |
        semgrep --config=auto backend/ --json --output=semgrep-report.json || true
        semgrep --config=auto backend/

    # Frontend Security Analysis
    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: Run ESLint Security Plugin
      working-directory: ./frontend
      run: |
        npx eslint . --ext .ts,.tsx --format json -o eslint-security-report.json || true
        npx eslint . --ext .ts,.tsx

    # Upload security reports as artifacts
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          frontend/npm-audit-report.json
          frontend/eslint-security-report.json

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Python Code Quality
    - name: Install Python Quality Tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Check Python Code Formatting
      run: |
        black --check backend/
        isort --check-only backend/

    - name: Run Python Linting
      run: flake8 backend/

    - name: Run Python Type Checking
      run: mypy backend/ --ignore-missing-imports

    - name: Run Python Tests with Coverage
      run: |
        pytest backend/ --cov=backend --cov-report=xml --cov-report=html

    # Frontend Code Quality
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Check TypeScript Types
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run Frontend Linting
      working-directory: ./frontend
      run: npx eslint . --ext .ts,.tsx

    - name: Check Frontend Formatting
      working-directory: ./frontend
      run: npx prettier --check .

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    # Upload coverage reports
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker Image
      run: docker build -t code-safe:latest .

    - name: Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'code-safe:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # License Compliance Check
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python License Compliance
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --fail-on="GPL"

    - name: Check Node.js License Compliance
      working-directory: ./frontend
      run: |
        npm ci
        npx license-checker --json --out ../node-licenses.json
        npx license-checker --failOn "GPL"

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [sast-analysis, code-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: codesafe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd frontend && npm ci

    - name: Run Backend Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codesafe_test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        python -m pytest backend/tests/integration/ -v

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run E2E Tests
      working-directory: ./frontend
      run: |
        npm run test:e2e

  # Security Notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [sast-analysis, container-security]
    if: failure()
    
    steps:
    - name: Notify Security Team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: 'Security vulnerabilities detected in Code Safe repository!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [sast-analysis, code-quality, container-security, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment steps here
